use std::cell::RefCell;
use std::collections::HashMap;

use api_client::ApiClientProvider;
use api_client::ApiClientTrait;
use api_client::ApiRequestError;
use event_bus;
use event_bus::*;
use kafka_protocol::protocol_request::Request;
use kafka_protocol::protocol_response::Response;
use kafka_protocol::protocol_serializable::ProtocolDeserializable;
use kafka_protocol::protocol_serializable::ProtocolSerializable;
use state::CurrentView;
use state::State;
use state::StateFNError;
use BootstrapServer;
use IO;

struct FakeApiClient(HashMap<i16, Vec<u8>>); // ApiKey => Byte Response

impl ApiClientTrait for FakeApiClient {
    fn request<T, U>(&self, _bootstrap_server: &BootstrapServer, request: Request<T>) -> Result<Response<U>, ApiRequestError>
    where
        T: ProtocolSerializable,
        Vec<u8>: ProtocolDeserializable<Response<U>>,
    {
        let response = self.0.get(&request.header.api_key).expect(format!("ApiKey response not defined for {}", &request.header.api_key).as_str());
        response.clone().into_protocol_type().map_err(|e| ApiRequestError::of(e.error))
    }
}

fn swap_state(state: &RefCell<State>, event: Event) {
    match event_bus::update_state(event, state.borrow_mut()) {
        Ok(state_result) => state.swap(&RefCell::new(state_result)),
        Err(StateFNError::Error(err)) => panic!(err),
        Err(StateFNError::Caused(err, _)) => panic!(err),
    }
}

fn test_bootstrap_server() -> BootstrapServer {
    BootstrapServer::of(String::from("fake"), 9092, false)
}

fn empty_api_client_provider() -> ApiClientProvider<FakeApiClient> {
    Box::new(|| IO::new(Box::new(|| Ok(FakeApiClient(HashMap::new())))))
}

fn test_api_client_provider(_responses: HashMap<i16, Vec<u8>>) -> ApiClientProvider<FakeApiClient> {
    Box::new(move || {
        let _responses = _responses.clone();
        IO::new(Box::new(move || Ok(FakeApiClient(_responses.clone()))))
    })
}

#[test]
fn get_metadata_and_select_topics() {
    let state = RefCell::new(State::new());

    let mut responses: HashMap<i16, Vec<u8>> = HashMap::new();
    // metadata
    responses.insert(
        3,
        vec![
            0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x09, 0x6C, 0x6F, 0x63, 0x61, 0x6C,
            0x68, 0x6F, 0x73, 0x74, 0x00, 0x00, 0x23, 0x85, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x09, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x68, 0x6F,
            0x73, 0x74, 0x00, 0x00, 0x23, 0x84, 0xFF, 0xFF, 0x00, 0x16, 0x55, 0x37, 0x7A, 0x53, 0x31, 0x4A, 0x51, 0x6D, 0x51, 0x70, 0x6D, 0x66, 0x65,
            0x6C, 0x6F, 0x5F, 0x63, 0x4E, 0x6D, 0x4E, 0x77, 0x51, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1B, 0x5F, 0x5F,
            0x63, 0x6F, 0x6E, 0x66, 0x6C, 0x75, 0x65, 0x6E, 0x74, 0x2E, 0x73, 0x75, 0x70, 0x70, 0x6F, 0x72, 0x74, 0x2E, 0x6D, 0x65, 0x74, 0x72, 0x69,
            0x63, 0x73, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x03, 0xE9, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x03, 0x66, 0x6F, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0B, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00,
            0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03,
            0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03,
            0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x03, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
            0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x62, 0x61, 0x72, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
            0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x03,
            0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03,
            0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x0F, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00,
        ],
    );
    // topic config for 'bar'
    responses.insert(
        32,
        vec![
            0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x02, 0x00, 0x03, 0x62, 0x61, 0x72, 0x00,
            0x00, 0x00, 0x19, 0x00, 0x10, 0x63, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x2E, 0x74, 0x79, 0x70, 0x65, 0x00, 0x08,
            0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x65, 0x72, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x6C, 0x65, 0x61, 0x64, 0x65, 0x72,
            0x2E, 0x72, 0x65, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x74, 0x68, 0x72, 0x6F, 0x74, 0x74, 0x6C, 0x65, 0x64, 0x2E,
            0x72, 0x65, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x73, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x6D, 0x65, 0x73, 0x73,
            0x61, 0x67, 0x65, 0x2E, 0x64, 0x6F, 0x77, 0x6E, 0x63, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x2E, 0x65, 0x6E, 0x61, 0x62,
            0x6C, 0x65, 0x00, 0x04, 0x74, 0x72, 0x75, 0x65, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x6D, 0x69, 0x6E, 0x2E, 0x69, 0x6E,
            0x73, 0x79, 0x6E, 0x63, 0x2E, 0x72, 0x65, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x73, 0x00, 0x01, 0x31, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x11, 0x73, 0x65, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x6A, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2E, 0x6D, 0x73, 0x00, 0x01, 0x30, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x63, 0x6C, 0x65, 0x61, 0x6E, 0x75, 0x70, 0x2E, 0x70, 0x6F, 0x6C, 0x69, 0x63, 0x79, 0x00,
            0x06, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x66, 0x6C, 0x75, 0x73, 0x68, 0x2E, 0x6D,
            0x73, 0x00, 0x13, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37, 0x32, 0x30, 0x33, 0x36, 0x38, 0x35, 0x34, 0x37, 0x37, 0x35, 0x38, 0x30, 0x37, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x66, 0x6F, 0x6C, 0x6C, 0x6F, 0x77, 0x65, 0x72, 0x2E, 0x72, 0x65, 0x70, 0x6C, 0x69, 0x63,
            0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x74, 0x68, 0x72, 0x6F, 0x74, 0x74, 0x6C, 0x65, 0x64, 0x2E, 0x72, 0x65, 0x70, 0x6C, 0x69, 0x63, 0x61,
            0x73, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x73, 0x65, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x62, 0x79, 0x74,
            0x65, 0x73, 0x00, 0x0A, 0x31, 0x30, 0x37, 0x33, 0x37, 0x34, 0x31, 0x38, 0x32, 0x34, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
            0x72, 0x65, 0x74, 0x65, 0x6E, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x6D, 0x73, 0x00, 0x09, 0x36, 0x30, 0x34, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30,
            0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x66, 0x6C, 0x75, 0x73, 0x68, 0x2E, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
            0x00, 0x13, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37, 0x32, 0x30, 0x33, 0x36, 0x38, 0x35, 0x34, 0x37, 0x37, 0x35, 0x38, 0x30, 0x37, 0x00, 0x05,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x2E, 0x76,
            0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x07, 0x32, 0x2E, 0x30, 0x2D, 0x49, 0x56, 0x31, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x14, 0x66, 0x69, 0x6C, 0x65, 0x2E, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x2E, 0x64, 0x65, 0x6C, 0x61, 0x79, 0x2E, 0x6D, 0x73, 0x00, 0x05,
            0x36, 0x30, 0x30, 0x30, 0x30, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x6D, 0x61, 0x78, 0x2E, 0x6D, 0x65, 0x73, 0x73, 0x61,
            0x67, 0x65, 0x2E, 0x62, 0x79, 0x74, 0x65, 0x73, 0x00, 0x07, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x15, 0x6D, 0x69, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x6C, 0x61, 0x67, 0x2E, 0x6D,
            0x73, 0x00, 0x01, 0x30, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2E, 0x74, 0x69,
            0x6D, 0x65, 0x73, 0x74, 0x61, 0x6D, 0x70, 0x2E, 0x74, 0x79, 0x70, 0x65, 0x00, 0x0A, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6D,
            0x65, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x70, 0x72, 0x65, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x61, 0x74, 0x65, 0x00, 0x05,
            0x66, 0x61, 0x6C, 0x73, 0x65, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x6D, 0x69, 0x6E, 0x2E, 0x63, 0x6C, 0x65, 0x61, 0x6E,
            0x61, 0x62, 0x6C, 0x65, 0x2E, 0x64, 0x69, 0x72, 0x74, 0x79, 0x2E, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x00, 0x03, 0x30, 0x2E, 0x35, 0x00, 0x05,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x2E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6C, 0x2E, 0x62,
            0x79, 0x74, 0x65, 0x73, 0x00, 0x04, 0x34, 0x30, 0x39, 0x36, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x75, 0x6E, 0x63, 0x6C,
            0x65, 0x61, 0x6E, 0x2E, 0x6C, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2E, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x65, 0x6E, 0x61,
            0x62, 0x6C, 0x65, 0x00, 0x05, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x72, 0x65, 0x74, 0x65,
            0x6E, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x62, 0x79, 0x74, 0x65, 0x73, 0x00, 0x02, 0x2D, 0x31, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x13, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x2E, 0x72, 0x65, 0x74, 0x65, 0x6E, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x6D, 0x73, 0x00, 0x08, 0x38,
            0x36, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x73, 0x65, 0x67, 0x6D, 0x65, 0x6E, 0x74,
            0x2E, 0x6D, 0x73, 0x00, 0x09, 0x36, 0x30, 0x34, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23,
            0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2E, 0x74, 0x69, 0x6D, 0x65, 0x73, 0x74, 0x61, 0x6D, 0x70, 0x2E, 0x64, 0x69, 0x66, 0x66, 0x65,
            0x72, 0x65, 0x6E, 0x63, 0x65, 0x2E, 0x6D, 0x61, 0x78, 0x2E, 0x6D, 0x73, 0x00, 0x13, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37, 0x32, 0x30, 0x33,
            0x36, 0x38, 0x35, 0x34, 0x37, 0x37, 0x35, 0x38, 0x30, 0x37, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x65, 0x67, 0x6D,
            0x65, 0x6E, 0x74, 0x2E, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x2E, 0x62, 0x79, 0x74, 0x65, 0x73, 0x00, 0x08, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37,
            0x36, 0x30, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
    );
    // topic partitions for 'foo'
    responses.insert(
        2,
        vec![
            0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x66, 0x6F, 0x6F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
            0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
            0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
    );

    /* Get metadata */
    let metadata_retrieved_event =
        match event_bus::to_event(Message::GetMetadata(test_bootstrap_server(), None), test_api_client_provider(responses.clone())) {
            Event::MetadataRetrieved(statefn) => match statefn(&state.borrow_mut()) {
                Ok(MetadataPayload::Metadata(metadata_response)) => {
                    assert_eq!(metadata_response.topic_metadata.len(), 3);
                    assert_eq!(
                        metadata_response.topic_metadata.iter().map(|t| t.topic.as_str()).collect::<Vec<&str>>(),
                        vec!["__confluent.support.metrics", "bar", "foo"]
                    );
                    Event::MetadataRetrieved(statefn)
                }
                _ => panic!("Expected MetadataPayload::Metadata"),
            },
            _ => panic!("Expected Event::MetadataRetrieved"),
        };
    swap_state(&state, metadata_retrieved_event);
    let updated_state = state.borrow().clone();

    /* Select the second topic */
    let selection_updated = match event_bus::to_event(Message::Select(MoveSelection::Down), empty_api_client_provider()) {
        Event::SelectionUpdated(statefn) => match statefn(&updated_state) {
            Ok((current_view, topic_index)) => {
                assert_eq!(current_view, updated_state.current_view);
                assert_eq!(topic_index, updated_state.selected_index + 1);
                Event::SelectionUpdated(statefn)
            }
            _ => panic!("Expected (CurrentView, usize)"),
        },
        _ => panic!("Expected Event::SelectionUpdated"),
    };
    swap_state(&state, selection_updated);

    /* Show topic config */
    let view_toggled = event_bus::to_event(Message::ToggleView(CurrentView::TopicInfo), empty_api_client_provider());
    swap_state(&state, view_toggled);

    /* Get topic metadata (topic config) */
    let metadata_retrieved_event =
        event_bus::to_event(Message::GetMetadata(test_bootstrap_server(), None), test_api_client_provider(responses.clone()));
    swap_state(&state, metadata_retrieved_event);
    let updated_state = state.borrow().clone();
    let topic_info_state = updated_state.topic_info_state.expect("Should have selected topic info for topic");
    assert_eq!(updated_state.selected_index, 1);
    assert_eq!(topic_info_state.selected_index, 0);
    assert_eq!(topic_info_state.topic_metadata.topic, "bar");
    assert_eq!(topic_info_state.topic_metadata.partition_metadata.len(), 16);
    assert_eq!(topic_info_state.config_resource.config_entries.len(), 25);

    /* Select the third topic */
    let view_toggled = event_bus::to_event(Message::ToggleView(CurrentView::Topics), empty_api_client_provider());
    swap_state(&state, view_toggled);
    let selection_updated = event_bus::to_event(Message::Select(MoveSelection::Down), empty_api_client_provider());
    swap_state(&state, selection_updated);

    /* Show topic partitions */
    let view_toggled = event_bus::to_event(Message::ToggleView(CurrentView::Partitions), empty_api_client_provider());
    swap_state(&state, view_toggled);

    /* Get topic metadata (topic partitions) */
    let metadata_retrieved_event =
        event_bus::to_event(Message::GetMetadata(test_bootstrap_server(), None), test_api_client_provider(responses.clone()));
    swap_state(&state, metadata_retrieved_event);
    let updated_state = state.borrow().clone();
    let partition_info_state = updated_state.partition_info_state.expect("Should have selected partitions for topic");
    assert_eq!(updated_state.selected_index, 2);
    assert_eq!(partition_info_state.partition_metadata.len(), 16);
}

#[test]
fn topic_deletion_marking() {
    let state = RefCell::new(State::new());

    let mut responses: HashMap<i16, Vec<u8>> = HashMap::new();
    // metadata
    responses.insert(
        3,
        vec![
            0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x09, 0x6C, 0x6F, 0x63, 0x61, 0x6C,
            0x68, 0x6F, 0x73, 0x74, 0x00, 0x00, 0x23, 0x85, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x09, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x68, 0x6F,
            0x73, 0x74, 0x00, 0x00, 0x23, 0x84, 0xFF, 0xFF, 0x00, 0x16, 0x55, 0x37, 0x7A, 0x53, 0x31, 0x4A, 0x51, 0x6D, 0x51, 0x70, 0x6D, 0x66, 0x65,
            0x6C, 0x6F, 0x5F, 0x63, 0x4E, 0x6D, 0x4E, 0x77, 0x51, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1B, 0x5F, 0x5F,
            0x63, 0x6F, 0x6E, 0x66, 0x6C, 0x75, 0x65, 0x6E, 0x74, 0x2E, 0x73, 0x75, 0x70, 0x70, 0x6F, 0x72, 0x74, 0x2E, 0x6D, 0x65, 0x74, 0x72, 0x69,
            0x63, 0x73, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x03, 0xE9, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x03, 0x66, 0x6F, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0B, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00,
            0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03,
            0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03,
            0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x03, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
            0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x62, 0x61, 0x72, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
            0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x03,
            0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03,
            0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x0F, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00,
        ],
    );
    // delete 'bar'
    responses.insert(20, vec![0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x62, 0x61, 0x72, 0x00, 0x00]);

    /* Get metadata */
    let metadata_retrieved_event =
        event_bus::to_event(Message::GetMetadata(test_bootstrap_server(), None), test_api_client_provider(responses.clone()));
    swap_state(&state, metadata_retrieved_event);

    /* Select the second topic */
    let selection_updated = event_bus::to_event(Message::Select(MoveSelection::Down), test_api_client_provider(responses.clone()));
    swap_state(&state, selection_updated);

    /* Delete the second topic */
    let delete_event = match event_bus::to_event(Message::Delete(test_bootstrap_server(), 30_000), test_api_client_provider(responses.clone())) {
        Event::ResourceDeleted(deletion) => match deletion(&state.borrow()) {
            Ok(Deletion::Topic(topic_deleted)) => {
                assert_eq!(topic_deleted, "bar");
                Event::ResourceDeleted(deletion)
            }
            _ => panic!("Expected deletion of 'bar' topic"),
        },
        _ => panic!("Expected Event::ResourceDeleted"),
    };
    swap_state(&state, delete_event);
    let updated_state = state.borrow().clone();
    assert_eq!(updated_state.marked_deleted, vec!["bar"]);
}

#[test]
fn modify_topic_config() {
    let state = RefCell::new(State::new());

    let mut responses = HashMap::new();
    // metadata
    responses.insert(
        3,
        vec![
            0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x09, 0x6C, 0x6F, 0x63, 0x61, 0x6C,
            0x68, 0x6F, 0x73, 0x74, 0x00, 0x00, 0x23, 0x85, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x09, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x68, 0x6F,
            0x73, 0x74, 0x00, 0x00, 0x23, 0x84, 0xFF, 0xFF, 0x00, 0x16, 0x55, 0x37, 0x7A, 0x53, 0x31, 0x4A, 0x51, 0x6D, 0x51, 0x70, 0x6D, 0x66, 0x65,
            0x6C, 0x6F, 0x5F, 0x63, 0x4E, 0x6D, 0x4E, 0x77, 0x51, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1B, 0x5F, 0x5F,
            0x63, 0x6F, 0x6E, 0x66, 0x6C, 0x75, 0x65, 0x6E, 0x74, 0x2E, 0x73, 0x75, 0x70, 0x70, 0x6F, 0x72, 0x74, 0x2E, 0x6D, 0x65, 0x74, 0x72, 0x69,
            0x63, 0x73, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x03, 0xE9, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x03, 0x66, 0x6F, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0B, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00,
            0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03,
            0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03,
            0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x03, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
            0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x62, 0x61, 0x72, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
            0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x03,
            0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03,
            0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x0F, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00,
        ],
    );
    // topic config for 'foo'
    responses.insert(
        32,
        vec![
            0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x02, 0x00, 0x03, 0x66, 0x6F, 0x6F, 0x00,
            0x00, 0x00, 0x19, 0x00, 0x10, 0x63, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x2E, 0x74, 0x79, 0x70, 0x65, 0x00, 0x08,
            0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x65, 0x72, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x6C, 0x65, 0x61, 0x64, 0x65, 0x72,
            0x2E, 0x72, 0x65, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x74, 0x68, 0x72, 0x6F, 0x74, 0x74, 0x6C, 0x65, 0x64, 0x2E,
            0x72, 0x65, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x73, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x6D, 0x65, 0x73, 0x73,
            0x61, 0x67, 0x65, 0x2E, 0x64, 0x6F, 0x77, 0x6E, 0x63, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x2E, 0x65, 0x6E, 0x61, 0x62,
            0x6C, 0x65, 0x00, 0x04, 0x74, 0x72, 0x75, 0x65, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x6D, 0x69, 0x6E, 0x2E, 0x69, 0x6E,
            0x73, 0x79, 0x6E, 0x63, 0x2E, 0x72, 0x65, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x73, 0x00, 0x01, 0x31, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x11, 0x73, 0x65, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x6A, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2E, 0x6D, 0x73, 0x00, 0x01, 0x30, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x63, 0x6C, 0x65, 0x61, 0x6E, 0x75, 0x70, 0x2E, 0x70, 0x6F, 0x6C, 0x69, 0x63, 0x79, 0x00,
            0x06, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x66, 0x6C, 0x75, 0x73, 0x68, 0x2E, 0x6D,
            0x73, 0x00, 0x13, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37, 0x32, 0x30, 0x33, 0x36, 0x38, 0x35, 0x34, 0x37, 0x37, 0x35, 0x38, 0x30, 0x37, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x66, 0x6F, 0x6C, 0x6C, 0x6F, 0x77, 0x65, 0x72, 0x2E, 0x72, 0x65, 0x70, 0x6C, 0x69, 0x63,
            0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x74, 0x68, 0x72, 0x6F, 0x74, 0x74, 0x6C, 0x65, 0x64, 0x2E, 0x72, 0x65, 0x70, 0x6C, 0x69, 0x63, 0x61,
            0x73, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x73, 0x65, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x62, 0x79, 0x74,
            0x65, 0x73, 0x00, 0x0A, 0x31, 0x30, 0x37, 0x33, 0x37, 0x34, 0x31, 0x38, 0x32, 0x34, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
            0x72, 0x65, 0x74, 0x65, 0x6E, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x6D, 0x73, 0x00, 0x09, 0x36, 0x30, 0x34, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30,
            0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x66, 0x6C, 0x75, 0x73, 0x68, 0x2E, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
            0x00, 0x13, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37, 0x32, 0x30, 0x33, 0x36, 0x38, 0x35, 0x34, 0x37, 0x37, 0x35, 0x38, 0x30, 0x37, 0x00, 0x05,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x2E, 0x76,
            0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x07, 0x32, 0x2E, 0x30, 0x2D, 0x49, 0x56, 0x31, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x14, 0x66, 0x69, 0x6C, 0x65, 0x2E, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x2E, 0x64, 0x65, 0x6C, 0x61, 0x79, 0x2E, 0x6D, 0x73, 0x00, 0x05,
            0x36, 0x30, 0x30, 0x30, 0x30, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x6D, 0x61, 0x78, 0x2E, 0x6D, 0x65, 0x73, 0x73, 0x61,
            0x67, 0x65, 0x2E, 0x62, 0x79, 0x74, 0x65, 0x73, 0x00, 0x07, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x15, 0x6D, 0x69, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x6C, 0x61, 0x67, 0x2E, 0x6D,
            0x73, 0x00, 0x01, 0x30, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2E, 0x74, 0x69,
            0x6D, 0x65, 0x73, 0x74, 0x61, 0x6D, 0x70, 0x2E, 0x74, 0x79, 0x70, 0x65, 0x00, 0x0A, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6D,
            0x65, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x70, 0x72, 0x65, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x61, 0x74, 0x65, 0x00, 0x05,
            0x66, 0x61, 0x6C, 0x73, 0x65, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x6D, 0x69, 0x6E, 0x2E, 0x63, 0x6C, 0x65, 0x61, 0x6E,
            0x61, 0x62, 0x6C, 0x65, 0x2E, 0x64, 0x69, 0x72, 0x74, 0x79, 0x2E, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x00, 0x03, 0x30, 0x2E, 0x35, 0x00, 0x05,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x2E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6C, 0x2E, 0x62,
            0x79, 0x74, 0x65, 0x73, 0x00, 0x04, 0x34, 0x30, 0x39, 0x36, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x75, 0x6E, 0x63, 0x6C,
            0x65, 0x61, 0x6E, 0x2E, 0x6C, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2E, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x65, 0x6E, 0x61,
            0x62, 0x6C, 0x65, 0x00, 0x05, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x72, 0x65, 0x74, 0x65,
            0x6E, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x62, 0x79, 0x74, 0x65, 0x73, 0x00, 0x02, 0x2D, 0x31, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x13, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x2E, 0x72, 0x65, 0x74, 0x65, 0x6E, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x6D, 0x73, 0x00, 0x08, 0x38,
            0x36, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x73, 0x65, 0x67, 0x6D, 0x65, 0x6E, 0x74,
            0x2E, 0x6D, 0x73, 0x00, 0x09, 0x36, 0x30, 0x34, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23,
            0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2E, 0x74, 0x69, 0x6D, 0x65, 0x73, 0x74, 0x61, 0x6D, 0x70, 0x2E, 0x64, 0x69, 0x66, 0x66, 0x65,
            0x72, 0x65, 0x6E, 0x63, 0x65, 0x2E, 0x6D, 0x61, 0x78, 0x2E, 0x6D, 0x73, 0x00, 0x13, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37, 0x32, 0x30, 0x33,
            0x36, 0x38, 0x35, 0x34, 0x37, 0x37, 0x35, 0x38, 0x30, 0x37, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x65, 0x67, 0x6D,
            0x65, 0x6E, 0x74, 0x2E, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x2E, 0x62, 0x79, 0x74, 0x65, 0x73, 0x00, 0x08, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37,
            0x36, 0x30, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
    );
    // alter config
    responses.insert(
        33,
        vec![0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x02, 0x00, 0x03, 0x66, 0x6F, 0x6F],
    );

    /* Get metadata */
    let metadata_retrieved_event =
        event_bus::to_event(Message::GetMetadata(test_bootstrap_server(), None), test_api_client_provider(responses.clone()));
    swap_state(&state, metadata_retrieved_event);

    /* Select the third topic and switch view to topic config */
    let selection_updated = event_bus::to_event(Message::Select(MoveSelection::Down), empty_api_client_provider());
    swap_state(&state, selection_updated);
    let selection_updated = event_bus::to_event(Message::Select(MoveSelection::Down), empty_api_client_provider());
    swap_state(&state, selection_updated);
    let view_toggled = event_bus::to_event(Message::ToggleView(CurrentView::TopicInfo), empty_api_client_provider());
    swap_state(&state, view_toggled);

    /* Get topic metadata (topic config) */
    let metadata_retrieved_event =
        event_bus::to_event(Message::GetMetadata(test_bootstrap_server(), None), test_api_client_provider(responses.clone()));
    swap_state(&state, metadata_retrieved_event);
    let updated_state = state.borrow().clone();
    let topic_info_state = updated_state.topic_info_state.unwrap();
    assert_eq!(topic_info_state.config_resource.config_entries.as_slice()[0].clone().config_value.unwrap(), "producer");

    /* Modify the third topic's first config ('compression.type') */
    let modify_event = match event_bus::to_event(
        Message::ModifyValue(test_bootstrap_server(), Some(String::from("snappy"))),
        test_api_client_provider(responses.clone()),
    ) {
        Event::ValueModified(modification) => match modification(&state.borrow()) {
            Ok(Modification::Config(config_name)) => {
                assert_eq!(config_name, "compression.type");
                Event::ValueModified(modification)
            }
            _ => panic!("Expected modification config"),
        },
        _ => panic!("Expected Event::ValueModified"),
    };
    swap_state(&state, modify_event);
    let topic_info_state = state.borrow().clone().topic_info_state.unwrap();
    assert_eq!(topic_info_state.configs_marked_modified, vec!["compression.type"]);

    /* Delete (reset) the config */
    let delete_event = match event_bus::to_event(Message::Delete(test_bootstrap_server(), 30_000), test_api_client_provider(responses.clone())) {
        Event::ResourceDeleted(deletion) => match deletion(&state.borrow()) {
            Ok(Deletion::Config(config_reset)) => {
                assert_eq!(config_reset, "compression.type");
                Event::ResourceDeleted(deletion)
            }
            _ => panic!("Expected deletion of 'compression.type' config"),
        },
        _ => panic!("Expected Event::ResourceDeleted"),
    };
    swap_state(&state, delete_event);
    let topic_info_state = state.borrow().clone().topic_info_state.unwrap();
    assert_eq!(topic_info_state.configs_marked_deleted, vec!["compression.type"]);
}

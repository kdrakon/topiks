use std::collections::HashMap;

use api_client::ApiClientTrait;
use api_client::ApiRequestError;
use event_bus;
use event_bus::*;
use kafka_protocol::protocol_request::Request;
use kafka_protocol::protocol_response::Response;
use kafka_protocol::protocol_serializable::ProtocolDeserializable;
use kafka_protocol::protocol_serializable::ProtocolSerializable;
use state::State;
use util::io::IO;
use BootstrapServer;

struct FakeApiClient(HashMap<i16, Vec<u8>>); // ApiKey => Byte Response

impl ApiClientTrait for FakeApiClient {
    fn request<T, U>(&self, bootstrap_server: &BootstrapServer, request: Request<T>) -> Result<Response<U>, ApiRequestError>
    where
        T: ProtocolSerializable,
        Vec<u8>: ProtocolDeserializable<Response<U>>,
    {
        dbg!(bootstrap_server);
        let response = self.0.get(&request.header.api_key).expect("ApiKey response not defined");
        response.clone().into_protocol_type().map_err(|e| ApiRequestError::of(e.error))
    }
}

#[test]
fn get_metadata() {
    let state = State::new();

    let test_api_client_provider = Box::new(|| {
        IO::new(Box::new(|| {
            Ok(FakeApiClient({
                let mut responses: HashMap<i16, Vec<u8>> = HashMap::new();
                responses.insert(
                    3,
                    vec![
                        0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x09, 0x6C, 0x6F, 0x63,
                        0x61, 0x6C, 0x68, 0x6F, 0x73, 0x74, 0x00, 0x00, 0x23, 0x85, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x09, 0x6C, 0x6F, 0x63,
                        0x61, 0x6C, 0x68, 0x6F, 0x73, 0x74, 0x00, 0x00, 0x23, 0x84, 0xFF, 0xFF, 0x00, 0x16, 0x55, 0x37, 0x7A, 0x53, 0x31, 0x4A, 0x51,
                        0x6D, 0x51, 0x70, 0x6D, 0x66, 0x65, 0x6C, 0x6F, 0x5F, 0x63, 0x4E, 0x6D, 0x4E, 0x77, 0x51, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
                        0x00, 0x02, 0x00, 0x00, 0x00, 0x1B, 0x5F, 0x5F, 0x63, 0x6F, 0x6E, 0x66, 0x6C, 0x75, 0x65, 0x6E, 0x74, 0x2E, 0x73, 0x75, 0x70,
                        0x70, 0x6F, 0x72, 0x74, 0x2E, 0x6D, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
                        0x02, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x66, 0x6F, 0x6F, 0x00,
                        0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03,
                        0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00,
                        0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00,
                        0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x03, 0xE8, 0x00,
                        0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00,
                        0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01,
                        0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x0D, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03,
                        0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                        0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00,
                        0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x03, 0xE8, 0x00,
                        0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00,
                        0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01,
                        0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x06, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03,
                        0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00,
                        0x00,
                    ],
                );
                responses
            }))
        }))
    });

    match event_bus::to_event(Message::GetMetadata(BootstrapServer::of(String::from("localhost"), 9092, false), None), test_api_client_provider) {
        Event::MetadataRetrieved(statefn) => match statefn(&state) {
            Ok(MetadataPayload::Metadata(metadata_response)) => {
                assert_eq!(2, metadata_response.topic_metadata.len());
                assert_eq!(vec!["__confluent.support.metrics", "foo"], metadata_response.topic_metadata.iter().map(|t|t.topic.as_str()).collect::<Vec<&str>>());
            },
            _ => panic!(),
        },
        _ => panic!("Expected MetadataRetrieved"),
    }
}
